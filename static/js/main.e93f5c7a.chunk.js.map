{"version":3,"sources":["firebase.js","components/BottomInput.js","components/MainNavbar.js","components/Message.js","components/MessageList.js","components/UserInfo.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","BottomInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","e","setState","target","value","preventDefault","messageString","replace","createMessage","trim","react_default","a","createElement","Form","onSubmit","handleSubmit","bind","Input","type","placeholder","onChange","handleChange","Component","MainNavbar","toggle","assertThisInitialized","isOpen","Navbar","color","dark","expand","fixed","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","className","Message","html","sanitizedHtml","sanitize","__html","require","markdown","toHTML","Container","fluid","Row","Col","xs","md","src","messageObject","image","alt","username","moment","timestamp","fromNow","dangerouslySetInnerHTML","createMarkup","MessageList","messagesEnd","React","createRef","scrollToBottom","current","scrollIntoView","behavior","messageList","length","ref","map","object","i","components_Message","key","UserInfo","Card","inverse","CardImg","top","CardBody","CardTitle","Button","outline","generateNewUser","App","newUsername","RandomWord","imgString","constants","userImage","_this2","database","on","snapshot","messages","val","newMessagesList","newMessage","push","text","Date","now","_this3","components_MainNavbar","components_UserInfo","components_MessageList","components_BottomInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e93f5c7a.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyBj4ccOkHKuMW3f_d67z8qzWFbA0fn5oTc\",\n    authDomain: \"one-chan-playground.firebaseapp.com\",\n    databaseURL: \"https://one-chan-playground.firebaseio.com\",\n    projectId: \"one-chan-playground\",\n    storageBucket: \"\",\n    messagingSenderId: \"1032608414674\"\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;","import React, { Component } from 'react';\nimport { Form, Input } from 'reactstrap';\n\nclass BottomInput extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      message: \"\"\n    }\n  }\n  handleChange(e) {\n    this.setState({ message: e.target.value });\n  }\n  handleSubmit(e){\n    e.preventDefault();\n    let messageString = this.state.message;\n    let noSpaceMsg = messageString.replace(/\\s/g,'');\n    if (noSpaceMsg !== \"\"){\n      this.props.createMessage(messageString.trim());\n    }\n    this.setState({message: \"\"});\n  }\n  render() {\n    return (\n      <div>\n        <Form onSubmit={this.handleSubmit.bind(this)}>\n          <Input type=\"text\" placeholder=\"Why not say something?\" value={this.state.message} onChange={this.handleChange.bind(this)} />\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default BottomInput;\n","import React, { Component } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink } from 'reactstrap';\n\nclass MainNavbar extends Component {\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n          <NavbarBrand href=\"#\">onechan</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav navbar>\n              <NavItem>\n                <NavLink href=\"https://github.com/mattxwang/onechan\">an anonymous one-channel chatroom</NavLink>\n              </NavItem>\n            </Nav>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"https://matthewwang.me\">made by matt wang</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default MainNavbar;\n","import React, { Component } from 'react';\n\nimport { Container, Row, Col } from 'reactstrap';\nimport moment from 'moment';\nimport sanitize from 'sanitize-html';\n\n\n\nclass Message extends Component {\n\n  createMarkup(html) {\n    let sanitizedHtml = sanitize(html);\n    let markdown = require( \"markdown\" ).markdown;\n    return {__html: markdown.toHTML(sanitizedHtml)};\n  }\n  render() {\n    return (\n      <div className=\"my-2\">\n        <Container fluid>\n            <Row>\n                <Col xs=\"2\" md=\"1\">\n                    <img className=\"message-image rounded\" src={this.props.messageObject.image} alt=\"A random avatar generated from adorable avatars.\" />\n                </Col>\n                <Col xs=\"10\" md=\"11\">\n                    <div><b>@{this.props.messageObject.username}</b> {moment(this.props.messageObject.timestamp).fromNow()}</div>\n                    <div dangerouslySetInnerHTML={this.createMarkup(this.props.messageObject.message)}></div>\n                </Col>\n            </Row>\n        </Container>\n        <hr className=\"message-dividers\" />\n      </div>\n    );\n  }\n}\n\nexport default Message;\n","import React, { Component } from 'react';\nimport Message from './Message';\n\n\nclass MessageList extends Component {\n    messagesEnd = React.createRef()\n\n    componentDidMount () {\n        this.scrollToBottom()\n    }\n    componentDidUpdate () {\n        this.scrollToBottom()\n    }\n    scrollToBottom = () => {\n        this.messagesEnd.current.scrollIntoView({ behavior: 'smooth' })\n    }\n    render() {\n        if (this.props.messageList.length === 0){\n            return (\n                <div className=\"text-white\">\n                    It's empty. Why not say something?\n                    <div ref={this.messagesEnd} />\n                </div>\n            )\n        }\n        return (\n            <div className=\"message-list\">\n                {\n                    this.props.messageList.map((object, i) => {\n                        return (\n                            <Message messageObject={object} key={i}></Message>\n                        )\n                    })\n                }\n                <div ref={this.messagesEnd} />\n            </div>\n        );\n    }\n}\n\nexport default MessageList;\n","import React, { Component } from 'react';\nimport { Card, CardImg, CardBody,\n  CardTitle, Button } from 'reactstrap';\n\nclass UserInfo extends Component {\n  render() {\n    return (\n      <div>\n        <Card color=\"dark\" inverse>\n          <CardImg top className=\"img-responsive\" src={this.props.image} alt=\"A random avatar generated from adorable avatars.\" />\n          <CardBody>\n            <CardTitle>you are <b>@{this.props.username}</b></CardTitle>\n            <Button color=\"primary\" outline onClick={this.props.generateNewUser}>become someone else</Button>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default UserInfo;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport firebase from './firebase.js';\nimport { Container, Row, Col } from 'reactstrap';\nimport RandomWord from 'random-words';\nimport constants from './constants.json';\n\nimport BottomInput from './components/BottomInput';\nimport MainNavbar from './components/MainNavbar';\nimport MessageList from './components/MessageList';\nimport UserInfo from './components/UserInfo';\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    let newUsername = RandomWord() + RandomWord();\n    let imgString = constants[\"adorable-avatars-url\"] + constants[\"profile-avatar-size\"] + \"/\" + newUsername + \".png\";\n    this.state = {\n      userImage: imgString,\n      username: newUsername,\n      messageList: []\n    };\n  }\n  componentDidMount() {\n    let messagesRef = firebase.database().ref('messages');\n    messagesRef.on('value', (snapshot) => {\n      let messages = snapshot.val();\n      let newMessagesList = [];\n      for (let message in messages) {\n        let newMessage = {\n          message: messages[message].message,\n          image: messages[message].image.replace(\"https://api.adorable.io/avatars/\", constants[\"adorable-avatars-url\"]),\n          username: messages[message].username,\n          timestamp: messages[message].timestamp\n        }\n        newMessagesList.push(newMessage);\n      }\n      this.setState({\n        messageList: newMessagesList\n      });\n    });\n  }\n  createMessage(text){\n    let newMessage = {\n      image: this.state.userImage,\n      message: text,\n      username: this.state.username,\n      timestamp: Date.now()\n    }\n    let messagesRef = firebase.database().ref('messages');\n    messagesRef.push(newMessage);\n  }\n  generateNewUser(){\n    let newUsername = RandomWord() + RandomWord();\n    let imgString = constants[\"adorable-avatars-url\"] + constants[\"profile-avatar-size\"] + \"/\" + newUsername + \".png\";\n    this.setState({\n      userImage: imgString,\n      username: newUsername\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <MainNavbar></MainNavbar>\n        <Container fluid>\n          <Row>\n            <Col xs=\"3\">\n              <UserInfo\n                username={this.state.username}\n                image={this.state.userImage}\n                generateNewUser = {() => {this.generateNewUser()}}\n              ></UserInfo>\n              <div className=\"text-white text-center\">\n                <small>made by <a href=\"https://matthewwang.me\">matt</a> on <a href=\"https://github.com/mattxwang/onechan\">GitHub</a> with react, firebase, and <a href=\"https://github.com/mattxwang/onechan\">many other node libraries</a> |  avatars from <a href=\"http://avatars.adorable.io/\">adorable avatars</a></small>\n              </div>\n            </Col>\n            <Col xs=\"9\">\n              <MessageList messageList={this.state.messageList}></MessageList>\n            </Col>\n          </Row>\n        </Container>\n        <Container className=\"fixed-bottom mb-1\" fluid>\n        <Row>\n          <Col xs=\"3\">\n          </Col>\n          <Col xs=\"9\">\n            <BottomInput createMessage={(text)=>{this.createMessage(text)}}></BottomInput>\n          </Col>\n        </Row>\n      </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}